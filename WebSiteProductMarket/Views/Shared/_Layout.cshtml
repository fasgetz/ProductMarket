<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>BUSINESS MANAGEMENT SOFTWARE - @ViewData["Title"] </title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" />
    <link href="~/css/Accordion.css" rel="stylesheet" />
    <link href="~/css/main.css" rel="stylesheet" />
    @RenderSection("Css", required: false)
</head>
<body>

    @if (!User.Identity.IsAuthenticated)
    {
        <!-- Окно входа в аккаунт -->
        <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">


                <div id="tabs" class="modal-content">
                    <div class="modal-close">
                        <button type="button" class="close text-right" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-header">
                        <div class="container">
                            <div class="row">
                                <div class="col p-0"><input v-on:click="activetab=1" v-bind:class="[ activetab === 1 ? 'btn-success' : '' ]" class="btn w-100" type="button" value="Войти"></div>
                                <div class="col p-0"><input v-on:click="activetab=2" v-bind:class="[ activetab === 2 ? 'btn-success' : '' ]" class="btn w-100" type="button" value="Регистрация"></div>
                            </div>
                        </div>
                    </div>
                    <div v-if="activetab === 1" class="modal-body" id="loginTab">
                        @await Component.InvokeAsync("LoginAccountComponent")
                    </div>
                    <div v-if="activetab === 2" class="modal-body">
                        @await Component.InvokeAsync("RegisterAccountComponent")
                    </div>
                </div>
            </div>
        </div>
    }

    <section>
        <div class="header">
            <div class="container-fluid">
                <nav class="navbar fixed-top navbar-expand-md navbar-light ">
                    <div class="container auth">
                        <a class="navbar-brand" asp-action="Index" asp-controller="Home">BusManSoft</a>
                        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                                aria-expanded="false" aria-label="Toggle navigation">
                            <span class="navbar-toggler-icon"></span>
                        </button>
                        <div class="navbar-collapse collapse d-md-inline-flex justify-content-between">
                            <ul class="navbar-nav flex-grow-1">
                                <li class="nav-item">
                                    <a class="nav-link text-dark pl-2" asp-area="" asp-controller="Home" asp-action="Privacy">Контакты</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link text-dark pl-2" asp-area="" asp-controller="Oferta" asp-action="Oferta">Договор оферты</a>
                                </li>
                            </ul>
                        </div>
                        <!-- Button trigger modal -->
                        @if (User.Identity.IsAuthenticated)
                        {
                            <div class="auth__div d-flex justify-content-center justify-content-lg-end">
                                @await Component.InvokeAsync("User")
                            </div>
                        }
                        else
                        {
                            <button type="button" id="loginButton" class="btn" data-toggle="modal" data-target="#exampleModalCenter">
                                Войти
                            </button>
                        }
                    </div>
                </nav>
            </div>
        </div>
    </section>
    <section>
        <div class="body">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-2 p-0 menu">
                        <ul id="accordion" v-cloak class="accordion p-0">
                            <li v-for="category in data">
                                <div class="link p-0 text-md-center text-lg-left">
                                    <img v-bind:src="getImage(category.poster)" /> {{ category.name }} <i class="fa fa-chevron-down"></i>
                                </div>
                                <ul class="submenu">
                                    <li v-for="(item, index) in category.subCategoryProduct">
                                        @*Поиск по категории при клике (вынести в отдельный компонент)*@
                                        <category :data="item"></category>
                                    </li>
                                </ul>
                            </li>
                        </ul>
                    </div>
                    <div class="col-md p-0">
                        <form id="search-products-input" v-cloak asp-action="SearchName" asp-controller="Search" method="get">
                            <div>
                                <div v class="search-block input-group mb-4 pl-3 pr-3">
                                    <span class="fa fa-search text-center"></span>
                                    <input id="input-search" autocomplete="off" name="name" v-on:focus="focused = true" v-on:blur="focused = false" v-model="text" v-on:input="searchText" type="text" class="form-control" placeholder="Поиск по названию продукта">
                                    <button class="btn btn-light" type="submit">Поиск</button>
                                    <div v-on:mousedown="handleItemClick(item)" v-for="item in searchData" v-show="focused" class="search-products-input__result">
                                        <a class="row search-products-input__result__item" v-bind:href="'/search?name='+ item.name">{{item.name}}</a>
                                    </div>
                                </div>
                            </div>
                        </form>

                        @RenderBody()

                    </div>
                </div>
            </div>
        </div>
    </section>
    <section class="myfooter">

    </section>


    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-ajax-unobtrusive/3.2.6/jquery.unobtrusive-ajax.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

    <script src="https://use.fontawesome.com/056ddd099c.js"></script>

    @* Vue JS and AXIOS to ajax query *@
    <script src="https://unpkg.com/vue"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <script src="~/js/script.js"></script>

    <script>
        // Компонент категории
Vue.component('category', {
    props: ['data'],
    template: `
                                        <a v-bind:href="'/category/search?category='+ item.id" class="pt-1 pb-1">
                                            <div class="row">
                                                <div class="col-sm-10 col-9 col-md-12 text-md-center col-lg-7 text-lg-left">
                                                    {{ item.name }}
                                                </div>
                                                <div class="col-sm-2 col-3 m-0 p-0 text-md-center col-md-12 col-lg-5 submenu__count">
                                                    <span class="submenu__countBooks">{{ item.countProducts }}</span>
                                                    <img class="submenu__count__img" v-bind:src="getImage(item.poster)" alt="Alternate Text" />
                                                </div>
                                            </div>
                                        </a>
`,
    data: function () {
        return {
            item: this.data
        }
    },
    mounted() {

    },
    methods: {
        CategorySearch: function () {
            location.href = "/search/category/" + this.item.id;
        },
        HasItem: function () {
            axios.get(('/Basket/haveItem'), {
                params: {
                    idProduct: this.item.id
                }
            })
                .then(response => {
                    var exist = response.data;

                });
        },
        getImage: function (array) {
            return 'data:image/jpg;base64, ' + array
        }
    }
})

    </script>
    <script>
        var app = new Vue({
            el: '#accordion',
            data() {
                return {
                    data: null,
                    images: null,
                    loaded: false
                };
            },
            mounted() {
                axios
                    .get('https://market-products.online:44310/api/category/get')
                    .then(
                        response => {
                            (this.data = response.data);
                            console.log(this.data);
                            let script = document.createElement('script');
                            script.setAttribute('src', '/js/Accordion.js');
                            document.head.appendChild(script);
                        });
            },
            methods: {
                getImage: function (array) {
                    return 'data:image/jpg;base64, ' + array
                },

            }
        });

    </script>

    <script>
        var searchProductInput = new Vue({
            el: '#search-products-input',
            data() {
                return {
                    searchData: null,
                    text: null,
                    focused: false,
                    mutableValue: null
                };
            },
            mounted() {

                this.searchText();
            },
            computed: {
                watchText: function () {
                    return this.text;
                },
                // Список продуктов
                watchProducts: function () {

                    return this.searchData;
                }
            },
            methods: {
                // Функция выбранного элемента в поиске
                handleItemClick: function (item) {

                    // Переходим по ссылке
                    location.href = "/search?name=" + item.name;

                    this.focused = !this.focused;
                },
                // Функция поиска
                searchText: function () {
                    axios
                    .get('http://market-products.online:9500/elasticsearch?text=' + this.text)
                        /*.get('http://localhost:56561/elasticsearch?text=' + this.text)*/
                        .then(
                            response => {
                                this.searchData = response.data

                            });
                },

            }
        });

    </script>

    <script>


        // Устанавливаем заголовок, чтобы при каждом запросе отправлять токен
        //$.ajaxSetup({
        //    headers: { "Content-Type": "application/json" }
        //});
        $.ajaxSetup({
            headers: { "Authorization": "Bearer " + getCookieValue('token') }
        });

        // Устанавливаем заголовок, чтобы при каждом запросе отправлять токен
        axios.defaults.headers.get['Authorization'] = "Bearer " + getCookieValue('token') // for GET requests
        axios.defaults.headers.post['Authorization'] = "Bearer " + getCookieValue('token') // for POST requests

        function getCookieValue(cname) { // cname is nothing but the cookie value which
            //contains the value
            var name = cname + "=";
            var decodedCookie = decodeURIComponent(document.cookie);
            var ca = decodedCookie.split(';');
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == ' ') {
                    c = c.substring(1);
                }
                if (c.indexOf(name) == 0) {
                    return c.substring(name.length, c.length);
                }
            }
            return "";
        }

    </script>


    @RenderSection("Scripts", required: false)
</body>
</html>
